{"name": "test_07", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (491, -112)\n  (Session info: chrome=130.0.6723.59)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7CD86E1F5+2972373]\n\t(No symbol) [0x00007FF7CD5055F0]\n\t(No symbol) [0x00007FF7CD3A57FA]\n\t(No symbol) [0x00007FF7CD3FD6CE]\n\t(No symbol) [0x00007FF7CD3FB16C]\n\t(No symbol) [0x00007FF7CD3F8628]\n\t(No symbol) [0x00007FF7CD3F783C]\n\t(No symbol) [0x00007FF7CD3E992E]\n\t(No symbol) [0x00007FF7CD41BA7A]\n\t(No symbol) [0x00007FF7CD3E9266]\n\t(No symbol) [0x00007FF7CD41BC90]\n\t(No symbol) [0x00007FF7CD43B8CC]\n\t(No symbol) [0x00007FF7CD41B823]\n\t(No symbol) [0x00007FF7CD3E75E8]\n\t(No symbol) [0x00007FF7CD3E8751]\n\tGetHandleVerifier [0x00007FF7CD8947BD+3129501]\n\tGetHandleVerifier [0x00007FF7CD8E4D00+3458528]\n\tGetHandleVerifier [0x00007FF7CD8DB05D+3418429]\n\tGetHandleVerifier [0x00007FF7CD66687B+844123]\n\t(No symbol) [0x00007FF7CD510AFF]\n\t(No symbol) [0x00007FF7CD50C6D4]\n\t(No symbol) [0x00007FF7CD50C86D]\n\t(No symbol) [0x00007FF7CD4FBD79]\n\tBaseThreadInitThunk [0x00007FFC3282257D+29]\n\tRtlUserThreadStart [0x00007FFC334AAF08+40]", "trace": "self = <Unittest_ModelY_Allure.Tesla_ModelY_Negative testMethod=test_07>\n\n    def test_07(self):\n    \n        driver = self.driver\n        self.driver.maximize_window()\n        driver.get('https://www.tesla.com/')\n    \n    # Verify that the user can't enter invalid values (invalid Last Name)\n        try:\n            driver.execute_script(\"window.scrollTo(0, 700)\")\n            delay()\n>           driver.find_element(By.XPATH, \"(//span[contains(.,'Order Now')])[1]\").click()\n\nUnittest_ModelY_Allure.py:930: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C7A5B25A90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7CD4FBD79]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC3282257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC334AAF08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (491, -112)\nE         (Session info: chrome=130.0.6723.59)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7CD86E1F5+2972373]\nE       \t(No symbol) [0x00007FF7CD5055F0]\nE       \t(No symbol) [0x00007FF7CD3A57FA]\nE       \t(No symbol) [0x00007FF7CD3FD6CE]\nE       \t(No symbol) [0x00007FF7CD3FB16C]\nE       \t(No symbol) [0x00007FF7CD3F8628]\nE       \t(No symbol) [0x00007FF7CD3F783C]\nE       \t(No symbol) [0x00007FF7CD3E992E]\nE       \t(No symbol) [0x00007FF7CD41BA7A]\nE       \t(No symbol) [0x00007FF7CD3E9266]\nE       \t(No symbol) [0x00007FF7CD41BC90]\nE       \t(No symbol) [0x00007FF7CD43B8CC]\nE       \t(No symbol) [0x00007FF7CD41B823]\nE       \t(No symbol) [0x00007FF7CD3E75E8]\nE       \t(No symbol) [0x00007FF7CD3E8751]\nE       \tGetHandleVerifier [0x00007FF7CD8947BD+3129501]\nE       \tGetHandleVerifier [0x00007FF7CD8E4D00+3458528]\nE       \tGetHandleVerifier [0x00007FF7CD8DB05D+3418429]\nE       \tGetHandleVerifier [0x00007FF7CD66687B+844123]\nE       \t(No symbol) [0x00007FF7CD510AFF]\nE       \t(No symbol) [0x00007FF7CD50C6D4]\nE       \t(No symbol) [0x00007FF7CD50C86D]\nE       \t(No symbol) [0x00007FF7CD4FBD79]\nE       \tBaseThreadInitThunk [0x00007FFC3282257D+29]\nE       \tRtlUserThreadStart [0x00007FFC334AAF08+40]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1729556307670, "stop": 1729556313402, "uuid": "6d708770-c459-4b7c-a488-8e9014d71eac", "historyId": "3efd93a91cae6f41163e87bfe72a45e4", "testCaseId": "3efd93a91cae6f41163e87bfe72a45e4", "fullName": "Unittest_ModelY_Allure.Tesla_ModelY_Negative#test_07", "labels": [{"name": "suite", "value": "Unittest_ModelY_Allure"}, {"name": "subSuite", "value": "Tesla_ModelY_Negative"}, {"name": "host", "value": "DESKTOP-01VP8UE"}, {"name": "thread", "value": "7952-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Unittest_ModelY_Allure"}]}